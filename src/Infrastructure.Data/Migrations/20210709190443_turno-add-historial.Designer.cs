// <auto-generated />
using System;
using Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210709190443_turno-add-historial")]
    partial class turnoaddhistorial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.DiaHorario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Dia")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("HoraDesde")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraHasta")
                        .HasColumnType("time");

                    b.Property<Guid>("ProfesionalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfesionalId");

                    b.ToTable("Horario");
                });

            modelBuilder.Entity("Domain.Entities.Especialidad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Especialidad");
                });

            modelBuilder.Entity("Domain.Entities.Paciente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Dni")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime>("FechaAlta")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Dni")
                        .IsUnique();

                    b.ToTable("Paciente");
                });

            modelBuilder.Entity("Domain.Entities.Permiso", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Permiso");
                });

            modelBuilder.Entity("Domain.Entities.ProfesionalCola", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan>("HoraLlegada")
                        .HasColumnType("time");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<Guid>("ProfesionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TurnoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProfesionalId");

                    b.HasIndex("TurnoId");

                    b.ToTable("Cola");
                });

            modelBuilder.Entity("Domain.Entities.ProfesionalEspecialidad", b =>
                {
                    b.Property<Guid>("ProfesionalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EspecialidadId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ProfesionalId", "EspecialidadId");

                    b.HasIndex("EspecialidadId");

                    b.ToTable("ProfesionalEspecialidad");
                });

            modelBuilder.Entity("Domain.Entities.Rol", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Descripcion")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Rol");
                });

            modelBuilder.Entity("Domain.Entities.RolPermiso", b =>
                {
                    b.Property<string>("RolId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PermisoId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RolId", "PermisoId");

                    b.HasIndex("PermisoId");

                    b.ToTable("RolPermiso");
                });

            modelBuilder.Entity("Domain.Entities.Turno", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Estado")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("HoraFin")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("HoraInicio")
                        .HasColumnType("time");

                    b.Property<Guid>("PacienteId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProfesionalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.HasIndex("ProfesionalId");

                    b.ToTable("Turno");
                });

            modelBuilder.Entity("Domain.Entities.TurnoHistorial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Accion")
                        .HasColumnType("int");

                    b.Property<int?>("EstadoDesde")
                        .HasColumnType("int");

                    b.Property<int>("EstadoHasta")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TurnoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TurnoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("TurnoHistorial");
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("RolId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.ToTable("Usuario");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Usuario");
                });

            modelBuilder.Entity("Domain.Entities.Admin", b =>
                {
                    b.HasBaseType("Domain.Entities.Usuario");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Domain.Entities.Profesional", b =>
                {
                    b.HasBaseType("Domain.Entities.Usuario");

                    b.Property<TimeSpan>("DuracionTurno")
                        .HasColumnType("time");

                    b.HasDiscriminator().HasValue("Profesional");
                });

            modelBuilder.Entity("Domain.Entities.Recepcionista", b =>
                {
                    b.HasBaseType("Domain.Entities.Usuario");

                    b.HasDiscriminator().HasValue("Recepcionista");
                });

            modelBuilder.Entity("Domain.Entities.DiaHorario", b =>
                {
                    b.HasOne("Domain.Entities.Profesional", "Profesional")
                        .WithMany("DiasQueAtiende")
                        .HasForeignKey("ProfesionalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Profesional");
                });

            modelBuilder.Entity("Domain.Entities.ProfesionalCola", b =>
                {
                    b.HasOne("Domain.Entities.Profesional", "Profesional")
                        .WithMany("Cola")
                        .HasForeignKey("ProfesionalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Turno", "Turno")
                        .WithMany()
                        .HasForeignKey("TurnoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profesional");

                    b.Navigation("Turno");
                });

            modelBuilder.Entity("Domain.Entities.ProfesionalEspecialidad", b =>
                {
                    b.HasOne("Domain.Entities.Especialidad", "Especialidad")
                        .WithMany("Profesionales")
                        .HasForeignKey("EspecialidadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Profesional", "Profesional")
                        .WithMany("Especialidades")
                        .HasForeignKey("ProfesionalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Especialidad");

                    b.Navigation("Profesional");
                });

            modelBuilder.Entity("Domain.Entities.RolPermiso", b =>
                {
                    b.HasOne("Domain.Entities.Permiso", "Permiso")
                        .WithMany()
                        .HasForeignKey("PermisoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Rol", "Rol")
                        .WithMany("Permisos")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permiso");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Domain.Entities.Turno", b =>
                {
                    b.HasOne("Domain.Entities.Paciente", "Paciente")
                        .WithMany("Turnos")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Profesional", "Profesional")
                        .WithMany("Turnos")
                        .HasForeignKey("ProfesionalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");

                    b.Navigation("Profesional");
                });

            modelBuilder.Entity("Domain.Entities.TurnoHistorial", b =>
                {
                    b.HasOne("Domain.Entities.Turno", "Turno")
                        .WithMany("Historial")
                        .HasForeignKey("TurnoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Turno");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.HasOne("Domain.Entities.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId");

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Domain.Entities.Especialidad", b =>
                {
                    b.Navigation("Profesionales");
                });

            modelBuilder.Entity("Domain.Entities.Paciente", b =>
                {
                    b.Navigation("Turnos");
                });

            modelBuilder.Entity("Domain.Entities.Rol", b =>
                {
                    b.Navigation("Permisos");
                });

            modelBuilder.Entity("Domain.Entities.Turno", b =>
                {
                    b.Navigation("Historial");
                });

            modelBuilder.Entity("Domain.Entities.Profesional", b =>
                {
                    b.Navigation("Cola");

                    b.Navigation("DiasQueAtiende");

                    b.Navigation("Especialidades");

                    b.Navigation("Turnos");
                });
#pragma warning restore 612, 618
        }
    }
}
